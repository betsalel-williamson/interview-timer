name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  # Quick validation for PRs
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Configure pnpm for CI
        run: |
          pnpm config set enable-pre-post-scripts true
          pnpm config set enable-build-scripts true

      - name: Troubleshoot lockfile issues
        run: |
          echo "=== CI Environment Debug Information ==="
          echo "Current working directory: $(pwd)"
          echo "Repository name: ${{ github.repository }}"
          echo "Repository path: ${{ github.workspace }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event name: ${{ github.event_name }}"
          echo ""
          echo "=== File System Check ==="
          echo "Contents of current directory:"
          ls -la
          echo ""
          echo "Looking for pnpm-lock.yaml:"
          find . -name "pnpm-lock.yaml" -type f 2>/dev/null || echo "pnpm-lock.yaml not found"
          echo ""
          echo "Looking for package.json:"
          find . -name "package.json" -type f 2>/dev/null || echo "package.json not found"
          echo ""
          echo "=== pnpm Configuration ==="
          pnpm config list
          echo ""
          echo "=== pnpm Version ==="
          pnpm --version
          echo ""
          echo "=== Node Version ==="
          node --version
          echo ""
          echo "=== Environment Variables ==="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_REF: $GITHUB_REF"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        id: linter
        run: pnpm run lint

      - name: Run unit tests with coverage
        id: unit-tests
        run: pnpm run test:unit:coverage

      - name: Report Unit Test Results
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: Unit Test Results
          path: unit-test-results/junit.xml
          reporter: jest-junit
          fail-on-error: false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Build application
        id: build
        run: pnpm run build

      - name: Generate Test Summary
        if: always()
        run: |
          echo "### PR Validation Summary üöÄ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Checks:**" >> $GITHUB_STEP_SUMMARY
          echo "- Linting: ${{ steps.linter.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ steps.unit-tests.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ steps.build.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage üìä" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          if [ -f "coverage/coverage-summary.txt" ]; then
            cat coverage/coverage-summary.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage summary not available" >> $GITHUB_STEP_SUMMARY
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with build status
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('## PR Validation Results')
            );

            const status = '${{ job.status }}' === 'success' ? '‚úÖ **PASSED**' : '‚ùå **FAILED**';
            const body = `## PR Validation Results

            **Status:** ${status}

            **Checks:**
            - Linting: ${{ steps.linter.outcome }}
            - Unit Tests: ${{ steps.unit-tests.outcome }}
            - Build: ${{ steps.build.outcome }}

            **Commit:** \`${{ github.sha }}\`
            **Branch:** \`${{ github.head_ref }}\`

            üìä **Test Results:** See the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed test reports and coverage information.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

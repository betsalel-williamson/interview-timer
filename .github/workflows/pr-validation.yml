name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Quick validation for PRs
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Configure pnpm for CI
        run: |
          pnpm config set enable-pre-post-scripts true
          pnpm config set enable-build-scripts true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run unit tests
        run: pnpm run test:unit

      - name: Build application
        run: pnpm run build

      - name: Comment PR with build status
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('## PR Validation Results')
            );

            const status = '${{ job.status }}' === 'success' ? '✅ **PASSED**' : '❌ **FAILED**';
            const body = `## PR Validation Results

            **Status:** ${status}

            **Checks:**
            - Linting: ${{ steps.lint.outcome }}
            - Unit Tests: ${{ steps.unit-tests.outcome }}
            - Build: ${{ steps.build.outcome }}

            **Commit:** \`${{ github.sha }}\`
            **Branch:** \`${{ github.head_ref }}\``;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

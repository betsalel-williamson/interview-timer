name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10'

jobs:
  # Unit Tests Job
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Configure pnpm for CI
        run: |
          pnpm config set enable-pre-post-scripts true
          pnpm config set enable-build-scripts true

      - name: Troubleshoot lockfile issues
        run: |
          echo "=== CI Environment Debug Information ==="
          echo "Current working directory: $(pwd)"
          echo "Repository name: ${{ github.repository }}"
          echo "Repository path: ${{ github.workspace }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event name: ${{ github.event_name }}"
          echo ""
          echo "=== File System Check ==="
          echo "Contents of current directory:"
          ls -la
          echo ""
          echo "Looking for pnpm-lock.yaml:"
          find . -name "pnpm-lock.yaml" -type f 2>/dev/null || echo "pnpm-lock.yaml not found"
          echo ""
          echo "Looking for package.json:"
          find . -name "package.json" -type f 2>/dev/null || echo "package.json not found"
          echo ""
          echo "=== pnpm Configuration ==="
          pnpm config list
          echo ""
          echo "=== pnpm Version ==="
          pnpm --version
          echo ""
          echo "=== Node Version ==="
          node --version
          echo ""
          echo "=== Environment Variables ==="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_REF: $GITHUB_REF"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: pnpm run test:unit:coverage

      - name: Report Unit Test Results
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: Unit Test Results
          path: unit-test-results/junit.xml
          reporter: jest-junit
          fail-on-error: false

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: unit-test-results/
          retention-days: 30

      - name: Generate Coverage Report
        if: always()
        run: |
          echo "### Unit Test Coverage ðŸ“Š" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          if [ -f "coverage/coverage-summary.txt" ]; then
            cat coverage/coverage-summary.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage report not available" >> $GITHUB_STEP_SUMMARY
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Lint Job
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Configure pnpm for CI
        run: |
          pnpm config set enable-pre-post-scripts true
          pnpm config set enable-build-scripts true

      - name: Troubleshoot lockfile issues
        run: |
          echo "=== CI Environment Debug Information ==="
          echo "Current working directory: $(pwd)"
          echo "Repository name: ${{ github.repository }}"
          echo "Repository path: ${{ github.workspace }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event name: ${{ github.event_name }}"
          echo ""
          echo "=== File System Check ==="
          echo "Contents of current directory:"
          ls -la
          echo ""
          echo "Looking for pnpm-lock.yaml:"
          find . -name "pnpm-lock.yaml" -type f 2>/dev/null || echo "pnpm-lock.yaml not found"
          echo ""
          echo "Looking for package.json:"
          find . -name "package.json" -type f 2>/dev/null || echo "package.json not found"
          echo ""
          echo "=== pnpm Configuration ==="
          pnpm config list
          echo ""
          echo "=== pnpm Version ==="
          pnpm --version
          echo ""
          echo "=== Node Version ==="
          node --version
          echo ""
          echo "=== Environment Variables ==="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_REF: $GITHUB_REF"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

  # Build Job
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [unit-tests, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Configure pnpm for CI
        run: |
          pnpm config set enable-pre-post-scripts true
          pnpm config set enable-build-scripts true

      - name: Troubleshoot lockfile issues
        run: |
          echo "=== CI Environment Debug Information ==="
          echo "Current working directory: $(pwd)"
          echo "Repository name: ${{ github.repository }}"
          echo "Repository path: ${{ github.workspace }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event name: ${{ github.event_name }}"
          echo ""
          echo "=== File System Check ==="
          echo "Contents of current directory:"
          ls -la
          echo ""
          echo "Looking for pnpm-lock.yaml:"
          find . -name "pnpm-lock.yaml" -type f 2>/dev/null || echo "pnpm-lock.yaml not found"
          echo ""
          echo "Looking for package.json:"
          find . -name "package.json" -type f 2>/dev/null || echo "package.json not found"
          echo ""
          echo "=== pnpm Configuration ==="
          pnpm config list
          echo ""
          echo "=== pnpm Version ==="
          pnpm --version
          echo ""
          echo "=== Node Version ==="
          node --version
          echo ""
          echo "=== Environment Variables ==="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_REF: $GITHUB_REF"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Deploy to Vercel (only on main branch pushes, never on PRs)
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !github.event.pull_request

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Configure pnpm for CI
        run: |
          pnpm config set enable-pre-post-scripts true
          pnpm config set enable-build-scripts true

      - name: Troubleshoot lockfile issues
        run: |
          echo "=== CI Environment Debug Information ==="
          echo "Current working directory: $(pwd)"
          echo "Repository name: ${{ github.repository }}"
          echo "Repository path: ${{ github.workspace }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event name: ${{ github.event_name }}"
          echo ""
          echo "=== File System Check ==="
          echo "Contents of current directory:"
          ls -la
          echo ""
          echo "Looking for pnpm-lock.yaml:"
          find . -name "pnpm-lock.yaml" -type f 2>/dev/null || echo "pnpm-lock.yaml not found"
          echo ""
          echo "Looking for package.json:"
          find . -name "package.json" -type f 2>/dev/null || echo "package.json not found"
          echo ""
          echo "=== pnpm Configuration ==="
          pnpm config list
          echo ""
          echo "=== pnpm Version ==="
          pnpm --version
          echo ""
          echo "=== Node Version ==="
          node --version
          echo ""
          echo "=== Environment Variables ==="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_REF: $GITHUB_REF"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Configure pnpm for CI
        run: |
          pnpm config set enable-pre-post-scripts true
          pnpm config set enable-build-scripts true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run dependency check
        run: pnpm audit --audit-level high
